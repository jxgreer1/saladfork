##########
# Macros #
##########
 
##### Variables #####
[gcode_macro MACROS_VARS]
variable_circ_fan_speed:        255
variable_probe_temp:            150
variable_starting_wled:           2
variable_heating_wled:            4
variable_ending_wled:             3
variable_ending_length:          25
variable_purge_length:           40
variable_filament_swap_length:  0.8
variable_pla_pa:             0.0525
variable_pet_pa:             0.0650
variable_abs_pa:             0.0460
variable_pet_za:              0.010
variable_move_away_home:          0
variable_homing_retract:         20
gcode:

[gcode_macro M600]
gcode:
    {% set X = params.X|default(160)|int %}
    {% set Y = params.Y|default(160)|int %}
    {% set Z = params.Z|default(10)|int %}
    {% set E = params.E|default(1) %}

;    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    ;G1 E-50 F1000
;    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    # Move nozzle away from print while retracting
    G91
    # Raise nozzle and retract
    G1 E-2 F1800
    G1 Z5 F3000
    # Move to absolute position
    G90
    G1 X160 Y160 F2000
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    M117 Print canceled
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro PART_COOLING_FAN_ON]
gcode:
    M106 S255

[gcode_macro PART_COOLING_FAN_OFF]
gcode:
    M106 S0
[gcode_macro PRINT_START]
gcode: 
    NEOPIXEL_DISPLAY LED="LEDS" TYPE=print_percent MODE=progress
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(180)|float %}   
    M190 S{BED_TEMP}   
    G28 Y0 X0 Z0
       M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}
    Z_TILT_ADJUST
    BED_MESH_CALIBRATE
    M109 S{EXTRUDER_TEMP}
    G80       
    G92 E0;    
    G90   
    G0 X5 Y5 F6000  
    SKEW_PROFILE LOAD=my_skew_profile
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}
    G90
    LINE_PURGE
    G1 Z15.0 F600 ;move the platform down 15mm
    G92 E0 ;zero the extruded length again
    G1 F9000
    M117 Printing..


[gcode_macro PRINT_END]
gcode:
    # Move nozzle away from print while retracting
    G91
    # Raise nozzle and retract
    G1 E-2 F1800
    G1 Z5 F3000
    # Move to absolute position
    G90
    G1 X160 Y160 F2000
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Disable steppers
    M84
    M117 Print complete

[gcode_macro FILAMENT_LOAD]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro FILAMENT_UNLOAD]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro HEAT_SOAK]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(110)%}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}
    M117 Heat Soak in progress..
    
    STATUS_HEATING
    M140 S{BED_TEMP}  ; Heat bed
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=40 ; actual target 45, but 42 is a good estimate considering the chamber temp will still rise while hotend heats.
    M104 S{EXTRUDER_TEMP}  ; extruder heat up and settle at requested value
    M117 Heat Soak Complete!


# Use this macro to heat the extruder and then resume like so:
# 
# HEAT_AND_RESUME TARGET=220
# 
[gcode_macro HEAT_AND_RESUME]
description: Heat the extruder and resume print when target is reached
gcode:
    # Get the extruder min_extrude_temp (will be 150 if not defined)
    {% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}
    # Get the target from params or set it to min_target if none is given
    {% set TARGET = params.TARGET|default(min_target)|float %}
    # Heat the extruder and wait for the target to be reached
    M109 S{TARGET}
    # Notify that print is resuming
    RESPOND TYPE=error MSG="Temperature reached. Resuming print."
    # Resume print when target is reached
    # This will automatically restore to the pre-PAUSE position
    # See here: https://www.klipper3d.org/G-Codes.html#resume
    RESUME

    
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}